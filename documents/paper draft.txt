Speed up - Cover heuristic 
I would like to introduce our previous method for you. 
we define 2 priority queues (priority queue is type of data structure that we could pop item based on a certain priority attribute), one is for target, another is for pursuers. Our method is trying to calculate target cover set, which we define as a integer number that representative for tiles target will reach earlier than pursuers. And we need a time variable which helps us to count turn. By pushing target and pursuers's positoin to each queue, we initiate 2 queues. Then we do while loop until our target priority queue is empty.
In this loop, we recursively pop item from queue, and then try to mark its unmarked neighbor positions with the mark "target-set" or "pursuer-set" and push them into the queue.
At the same time, we count the number of "target-set"-marked position. Finally, we return our target cover set value.

Map Abstraction
Abstraction is a kind of method we use to consider something roughly. A map abstraction hierarchy have several levels due to our abstraction degree. In lower level, we can have a full knowledge of map information, accurately to every tile details, but it costs us too much time for searching. On the contrary, in higher level, we have less information, but the map become smaller and convinient for us to do searching.
Our original grid map often is type of 2-dimension array. In order to implement abstraction, we firstly transfer our map from array to connected graph (bidirectional). Then we do abstraction.
In this paper, our agent only moves in four directions (left, up, right, down). Different from related research, in one abstration, we abstract two connected and unabstracted node to one (level + 1). In the case that one unabstracted node have no unabstracted connected node, we abstract this one to higher level.
We use FIFO queue to store the nodes which are going to be abstracted.

Map Refinement.









How to combine them?
